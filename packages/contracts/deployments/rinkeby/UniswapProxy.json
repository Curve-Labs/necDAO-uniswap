{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expected",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "returned",
          "type": "uint256"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "avatar",
      "outputs": [
        {
          "internalType": "contract Avatar",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract Avatar",
          "name": "_avatar",
          "type": "address"
        },
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "_router",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_expected",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "receipt": {
    "to": null,
    "from": "0xb71D2D88030A00830C3D45f84C12cc8aAF6857a5",
    "contractAddress": "0xE115f06D1DF7526D4cdbcffb9395399Af0620039",
    "transactionIndex": 2,
    "gasUsed": "1078436",
    "logsBloom": "0x
    "blockHash": "0xc5e6cf178f97c8b0ccae6dd05628538a4eb668be5fb754dfbde382d09fbb4e0f",
    "transactionHash": "0x837db7545cdc36c2017d71b84a189c21947f3374c31161aa0d9395dd873c8d5f",
    "logs": [],
    "blockNumber": 7033985,
    "cumulativeGasUsed": "6400597",
    "status": 1,
    "byzantium": true
  },
  "address": "0xE115f06D1DF7526D4cdbcffb9395399Af0620039",
  "args": [],
  "solcInputHash": "0x454850b01023264a573239b7b66e0907d71c4546daa12ae42c7804710b084501",
  "metadata": "{\"compiler\":{\"version\":\"0.5.13+commit.5b0b510c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"returned\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"avatar\",\"outputs\":[{\"internalType\":\"contract Avatar\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract Avatar\",\"name\":\"_avatar\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expected\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"We'll tell when we know\",\"methods\":{\"initialize(address,address)\":{\"details\":\"Initialize proxy.\",\"params\":{\"_avatar\":\"The address of the Avatar controlling this proxy.\",\"_router\":\"The address of the Uniswap router through which this proxy will interact with UniswapV2.\"}},\"swap(address,address,uint256,uint256)\":{\"details\":\"Swap tokens.\",\"params\":{\"_amount\":\"The amount of `_from` token to swap.\",\"_expected\":\"The minimum amount of `_to` token to expect in return for the swap [reverts otherwise].\",\"_from\":\"The address of the token to swap from [address(0) for ETH].\",\"_to\":\"The address of the token to swap to [address(0) for ETH].\"}}},\"title\":\"A UniswapV2 proxy made with \\u2764\\ufe0f for the necDAO folks\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/UniswapProxy.sol\":\"UniswapProxy\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@daostack/arc/contracts/controller/Avatar.sol\":{\"content\":\"pragma solidity 0.5.13;\\n\\nimport \\\"@daostack/infra/contracts/Reputation.sol\\\";\\nimport \\\"./DAOToken.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/ownership/Ownable.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../libs/SafeERC20.sol\\\";\\n\\n\\n/**\\n * @title An Avatar holds tokens, reputation and ether for a controller\\n */\\ncontract Avatar is Ownable {\\n    using SafeERC20 for address;\\n\\n    string public orgName;\\n    DAOToken public nativeToken;\\n    Reputation public nativeReputation;\\n\\n    event GenericCall(address indexed _contract, bytes _data, uint _value, bool _success);\\n    event SendEther(uint256 _amountInWei, address indexed _to);\\n    event ExternalTokenTransfer(address indexed _externalToken, address indexed _to, uint256 _value);\\n    event ExternalTokenTransferFrom(address indexed _externalToken, address _from, address _to, uint256 _value);\\n    event ExternalTokenApproval(address indexed _externalToken, address _spender, uint256 _value);\\n    event ReceiveEther(address indexed _sender, uint256 _value);\\n    event MetaData(string _metaData);\\n\\n    /**\\n    * @dev the constructor takes organization name, native token and reputation system\\n    and creates an avatar for a controller\\n    */\\n    constructor(string memory _orgName, DAOToken _nativeToken, Reputation _nativeReputation) public {\\n        orgName = _orgName;\\n        nativeToken = _nativeToken;\\n        nativeReputation = _nativeReputation;\\n    }\\n\\n    /**\\n    * @dev enables an avatar to receive ethers\\n    */\\n    function() external payable {\\n        emit ReceiveEther(msg.sender, msg.value);\\n    }\\n\\n    /**\\n    * @dev perform a generic call to an arbitrary contract\\n    * @param _contract  the contract's address to call\\n    * @param _data ABI-encoded contract call to call `_contract` address.\\n    * @param _value value (ETH) to transfer with the transaction\\n    * @return bool    success or fail\\n    *         bytes - the return bytes of the called contract's function.\\n    */\\n    function genericCall(address _contract, bytes memory _data, uint256 _value)\\n    public\\n    onlyOwner\\n    returns(bool success, bytes memory returnValue) {\\n      // solhint-disable-next-line avoid-call-value\\n        (success, returnValue) = _contract.call.value(_value)(_data);\\n        emit GenericCall(_contract, _data, _value, success);\\n    }\\n\\n    /**\\n    * @dev send ethers from the avatar's wallet\\n    * @param _amountInWei amount to send in Wei units\\n    * @param _to send the ethers to this address\\n    * @return bool which represents success\\n    */\\n    function sendEther(uint256 _amountInWei, address payable _to) public onlyOwner returns(bool) {\\n        _to.transfer(_amountInWei);\\n        emit SendEther(_amountInWei, _to);\\n        return true;\\n    }\\n\\n    /**\\n    * @dev external token transfer\\n    * @param _externalToken the token contract\\n    * @param _to the destination address\\n    * @param _value the amount of tokens to transfer\\n    * @return bool which represents success\\n    */\\n    function externalTokenTransfer(IERC20 _externalToken, address _to, uint256 _value)\\n    public onlyOwner returns(bool)\\n    {\\n        address(_externalToken).safeTransfer(_to, _value);\\n        emit ExternalTokenTransfer(address(_externalToken), _to, _value);\\n        return true;\\n    }\\n\\n    /**\\n    * @dev external token transfer from a specific account\\n    * @param _externalToken the token contract\\n    * @param _from the account to spend token from\\n    * @param _to the destination address\\n    * @param _value the amount of tokens to transfer\\n    * @return bool which represents success\\n    */\\n    function externalTokenTransferFrom(\\n        IERC20 _externalToken,\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    )\\n    public onlyOwner returns(bool)\\n    {\\n        address(_externalToken).safeTransferFrom(_from, _to, _value);\\n        emit ExternalTokenTransferFrom(address(_externalToken), _from, _to, _value);\\n        return true;\\n    }\\n\\n    /**\\n    * @dev externalTokenApproval approve the spender address to spend a specified amount of tokens\\n    *      on behalf of msg.sender.\\n    * @param _externalToken the address of the Token Contract\\n    * @param _spender address\\n    * @param _value the amount of ether (in Wei) which the approval is referring to.\\n    * @return bool which represents a success\\n    */\\n    function externalTokenApproval(IERC20 _externalToken, address _spender, uint256 _value)\\n    public onlyOwner returns(bool)\\n    {\\n        address(_externalToken).safeApprove(_spender, _value);\\n        emit ExternalTokenApproval(address(_externalToken), _spender, _value);\\n        return true;\\n    }\\n\\n    /**\\n    * @dev metaData emits an event with a string, should contain the hash of some meta data.\\n    * @param _metaData a string representing a hash of the meta data\\n    * @return bool which represents a success\\n    */\\n    function metaData(string memory _metaData) public onlyOwner returns(bool) {\\n        emit MetaData(_metaData);\\n        return true;\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0xdc75e96aca5c6aeaa3bbf97d2a3a1d305c1c168b74f1d5a6b151648e1b71086f\"},\"@daostack/arc/contracts/controller/Controller.sol\":{\"content\":\"pragma solidity 0.5.13;\\n\\nimport \\\"./Avatar.sol\\\";\\nimport \\\"../globalConstraints/GlobalConstraintInterface.sol\\\";\\n\\n/**\\n * @title Controller contract\\n * @dev A controller controls the organizations tokens, reputation and avatar.\\n * It is subject to a set of schemes and constraints that determine its behavior.\\n * Each scheme has it own parameters and operation permissions.\\n */\\ncontract Controller {\\n\\n    struct Scheme {\\n        bytes32 paramsHash;  // a hash \\\"configuration\\\" of the scheme\\n        bytes4  permissions; // A bitwise flags of permissions,\\n                             // All 0: Not registered,\\n                             // 1st bit: Flag if the scheme is registered,\\n                             // 2nd bit: Scheme can register other schemes\\n                             // 3rd bit: Scheme can add/remove global constraints\\n                             // 4th bit: Scheme can upgrade the controller\\n                             // 5th bit: Scheme can call genericCall on behalf of\\n                             //          the organization avatar\\n    }\\n\\n    struct GlobalConstraint {\\n        address gcAddress;\\n        bytes32 params;\\n    }\\n\\n    struct GlobalConstraintRegister {\\n        bool isRegistered; //is registered\\n        uint256 index;    //index at globalConstraints\\n    }\\n\\n    mapping(address=>Scheme) public schemes;\\n\\n    Avatar public avatar;\\n    DAOToken public nativeToken;\\n    Reputation public nativeReputation;\\n  // newController will point to the new controller after the present controller is upgraded\\n    address public newController;\\n  // globalConstraintsPre that determine pre conditions for all actions on the controller\\n\\n    GlobalConstraint[] public globalConstraintsPre;\\n  // globalConstraintsPost that determine post conditions for all actions on the controller\\n    GlobalConstraint[] public globalConstraintsPost;\\n  // globalConstraintsRegisterPre indicate if a globalConstraints is registered as a pre global constraint\\n    mapping(address=>GlobalConstraintRegister) public globalConstraintsRegisterPre;\\n  // globalConstraintsRegisterPost indicate if a globalConstraints is registered as a post global constraint\\n    mapping(address=>GlobalConstraintRegister) public globalConstraintsRegisterPost;\\n\\n    event MintReputation (address indexed _sender, address indexed _to, uint256 _amount);\\n    event BurnReputation (address indexed _sender, address indexed _from, uint256 _amount);\\n    event MintTokens (address indexed _sender, address indexed _beneficiary, uint256 _amount);\\n    event RegisterScheme (address indexed _sender, address indexed _scheme);\\n    event UnregisterScheme (address indexed _sender, address indexed _scheme);\\n    event UpgradeController(address indexed _oldController, address _newController);\\n\\n    event AddGlobalConstraint(\\n        address indexed _globalConstraint,\\n        bytes32 _params,\\n        GlobalConstraintInterface.CallPhase _when);\\n\\n    event RemoveGlobalConstraint(address indexed _globalConstraint, uint256 _index, bool _isPre);\\n\\n    constructor( Avatar _avatar) public {\\n        avatar = _avatar;\\n        nativeToken = avatar.nativeToken();\\n        nativeReputation = avatar.nativeReputation();\\n        schemes[msg.sender] = Scheme({paramsHash: bytes32(0), permissions: bytes4(0x0000001F)});\\n        emit RegisterScheme (msg.sender, msg.sender);\\n    }\\n\\n  // Do not allow mistaken calls:\\n   // solhint-disable-next-line payable-fallback\\n    function() external {\\n        revert();\\n    }\\n\\n  // Modifiers:\\n    modifier onlyRegisteredScheme() {\\n        require(schemes[msg.sender].permissions&bytes4(0x00000001) == bytes4(0x00000001));\\n        _;\\n    }\\n\\n    modifier onlyRegisteringSchemes() {\\n        require(schemes[msg.sender].permissions&bytes4(0x00000002) == bytes4(0x00000002));\\n        _;\\n    }\\n\\n    modifier onlyGlobalConstraintsScheme() {\\n        require(schemes[msg.sender].permissions&bytes4(0x00000004) == bytes4(0x00000004));\\n        _;\\n    }\\n\\n    modifier onlyUpgradingScheme() {\\n        require(schemes[msg.sender].permissions&bytes4(0x00000008) == bytes4(0x00000008));\\n        _;\\n    }\\n\\n    modifier onlyGenericCallScheme() {\\n        require(schemes[msg.sender].permissions&bytes4(0x00000010) == bytes4(0x00000010));\\n        _;\\n    }\\n\\n    modifier onlyMetaDataScheme() {\\n        require(schemes[msg.sender].permissions&bytes4(0x00000010) == bytes4(0x00000010));\\n        _;\\n    }\\n\\n    modifier onlySubjectToConstraint(bytes32 func) {\\n        uint256 idx;\\n        for (idx = 0; idx < globalConstraintsPre.length; idx++) {\\n            require(\\n            (GlobalConstraintInterface(globalConstraintsPre[idx].gcAddress))\\n            .pre(msg.sender, globalConstraintsPre[idx].params, func));\\n        }\\n        _;\\n        for (idx = 0; idx < globalConstraintsPost.length; idx++) {\\n            require(\\n            (GlobalConstraintInterface(globalConstraintsPost[idx].gcAddress))\\n            .post(msg.sender, globalConstraintsPost[idx].params, func));\\n        }\\n    }\\n\\n    modifier isAvatarValid(address _avatar) {\\n        require(_avatar == address(avatar));\\n        _;\\n    }\\n\\n    /**\\n     * @dev Mint `_amount` of reputation that are assigned to `_to` .\\n     * @param  _amount amount of reputation to mint\\n     * @param _to beneficiary address\\n     * @return bool which represents a success\\n     */\\n    function mintReputation(uint256 _amount, address _to, address _avatar)\\n    external\\n    onlyRegisteredScheme\\n    onlySubjectToConstraint(\\\"mintReputation\\\")\\n    isAvatarValid(_avatar)\\n    returns(bool)\\n    {\\n        emit MintReputation(msg.sender, _to, _amount);\\n        return nativeReputation.mint(_to, _amount);\\n    }\\n\\n    /**\\n     * @dev Burns `_amount` of reputation from `_from`\\n     * @param _amount amount of reputation to burn\\n     * @param _from The address that will lose the reputation\\n     * @return bool which represents a success\\n     */\\n    function burnReputation(uint256 _amount, address _from, address _avatar)\\n    external\\n    onlyRegisteredScheme\\n    onlySubjectToConstraint(\\\"burnReputation\\\")\\n    isAvatarValid(_avatar)\\n    returns(bool)\\n    {\\n        emit BurnReputation(msg.sender, _from, _amount);\\n        return nativeReputation.burn(_from, _amount);\\n    }\\n\\n    /**\\n     * @dev mint tokens .\\n     * @param  _amount amount of token to mint\\n     * @param _beneficiary beneficiary address\\n     * @return bool which represents a success\\n     */\\n    function mintTokens(uint256 _amount, address _beneficiary, address _avatar)\\n    external\\n    onlyRegisteredScheme\\n    onlySubjectToConstraint(\\\"mintTokens\\\")\\n    isAvatarValid(_avatar)\\n    returns(bool)\\n    {\\n        emit MintTokens(msg.sender, _beneficiary, _amount);\\n        return nativeToken.mint(_beneficiary, _amount);\\n    }\\n\\n  /**\\n   * @dev register a scheme\\n   * @param _scheme the address of the scheme\\n   * @param _paramsHash a hashed configuration of the usage of the scheme\\n   * @param _permissions the permissions the new scheme will have\\n   * @return bool which represents a success\\n   */\\n    function registerScheme(address _scheme, bytes32 _paramsHash, bytes4 _permissions, address _avatar)\\n    external\\n    onlyRegisteringSchemes\\n    onlySubjectToConstraint(\\\"registerScheme\\\")\\n    isAvatarValid(_avatar)\\n    returns(bool)\\n    {\\n\\n        Scheme memory scheme = schemes[_scheme];\\n\\n    // Check scheme has at least the permissions it is changing, and at least the current permissions:\\n    // Implementation is a bit messy. One must recall logic-circuits ^^\\n\\n    // produces non-zero if sender does not have all of the perms that are changing between old and new\\n        require(bytes4(0x0000001f)&(_permissions^scheme.permissions)&(~schemes[msg.sender].permissions) == bytes4(0));\\n\\n    // produces non-zero if sender does not have all of the perms in the old scheme\\n        require(bytes4(0x0000001f)&(scheme.permissions&(~schemes[msg.sender].permissions)) == bytes4(0));\\n\\n    // Add or change the scheme:\\n        schemes[_scheme].paramsHash = _paramsHash;\\n        schemes[_scheme].permissions = _permissions|bytes4(0x00000001);\\n        emit RegisterScheme(msg.sender, _scheme);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev unregister a scheme\\n     * @param _scheme the address of the scheme\\n     * @return bool which represents a success\\n     */\\n    function unregisterScheme( address _scheme, address _avatar)\\n    external\\n    onlyRegisteringSchemes\\n    onlySubjectToConstraint(\\\"unregisterScheme\\\")\\n    isAvatarValid(_avatar)\\n    returns(bool)\\n    {\\n    //check if the scheme is registered\\n        if (_isSchemeRegistered(_scheme) == false) {\\n            return false;\\n        }\\n    // Check the unregistering scheme has enough permissions:\\n        require(bytes4(0x0000001f)&(schemes[_scheme].permissions&(~schemes[msg.sender].permissions)) == bytes4(0));\\n\\n    // Unregister:\\n        emit UnregisterScheme(msg.sender, _scheme);\\n        delete schemes[_scheme];\\n        return true;\\n    }\\n\\n    /**\\n     * @dev unregister the caller's scheme\\n     * @return bool which represents a success\\n     */\\n    function unregisterSelf(address _avatar) external isAvatarValid(_avatar) returns(bool) {\\n        if (_isSchemeRegistered(msg.sender) == false) {\\n            return false;\\n        }\\n        delete schemes[msg.sender];\\n        emit UnregisterScheme(msg.sender, msg.sender);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev add or update Global Constraint\\n     * @param _globalConstraint the address of the global constraint to be added.\\n     * @param _params the constraint parameters hash.\\n     * @return bool which represents a success\\n     */\\n    function addGlobalConstraint(address _globalConstraint, bytes32 _params, address _avatar)\\n    external\\n    onlyGlobalConstraintsScheme\\n    isAvatarValid(_avatar)\\n    returns(bool)\\n    {\\n        GlobalConstraintInterface.CallPhase when = GlobalConstraintInterface(_globalConstraint).when();\\n        if ((when == GlobalConstraintInterface.CallPhase.Pre)||\\n            (when == GlobalConstraintInterface.CallPhase.PreAndPost)) {\\n            if (!globalConstraintsRegisterPre[_globalConstraint].isRegistered) {\\n                globalConstraintsPre.push(GlobalConstraint(_globalConstraint, _params));\\n                globalConstraintsRegisterPre[_globalConstraint] =\\n                GlobalConstraintRegister(true, globalConstraintsPre.length-1);\\n            }else {\\n                globalConstraintsPre[globalConstraintsRegisterPre[_globalConstraint].index].params = _params;\\n            }\\n        }\\n        if ((when == GlobalConstraintInterface.CallPhase.Post)||\\n            (when == GlobalConstraintInterface.CallPhase.PreAndPost)) {\\n            if (!globalConstraintsRegisterPost[_globalConstraint].isRegistered) {\\n                globalConstraintsPost.push(GlobalConstraint(_globalConstraint, _params));\\n                globalConstraintsRegisterPost[_globalConstraint] =\\n                GlobalConstraintRegister(true, globalConstraintsPost.length-1);\\n            }else {\\n                globalConstraintsPost[globalConstraintsRegisterPost[_globalConstraint].index].params = _params;\\n            }\\n        }\\n        emit AddGlobalConstraint(_globalConstraint, _params, when);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev remove Global Constraint\\n     * @param _globalConstraint the address of the global constraint to be remove.\\n     * @return bool which represents a success\\n     */\\n     // solhint-disable-next-line code-complexity\\n    function removeGlobalConstraint (address _globalConstraint, address _avatar)\\n    external\\n    onlyGlobalConstraintsScheme\\n    isAvatarValid(_avatar)\\n    returns(bool)\\n    {\\n        GlobalConstraintRegister memory globalConstraintRegister;\\n        GlobalConstraint memory globalConstraint;\\n        GlobalConstraintInterface.CallPhase when = GlobalConstraintInterface(_globalConstraint).when();\\n        bool retVal = false;\\n\\n        if ((when == GlobalConstraintInterface.CallPhase.Pre)||\\n            (when == GlobalConstraintInterface.CallPhase.PreAndPost)) {\\n            globalConstraintRegister = globalConstraintsRegisterPre[_globalConstraint];\\n            if (globalConstraintRegister.isRegistered) {\\n                if (globalConstraintRegister.index < globalConstraintsPre.length-1) {\\n                    globalConstraint = globalConstraintsPre[globalConstraintsPre.length-1];\\n                    globalConstraintsPre[globalConstraintRegister.index] = globalConstraint;\\n                    globalConstraintsRegisterPre[globalConstraint.gcAddress].index = globalConstraintRegister.index;\\n                }\\n                globalConstraintsPre.length--;\\n                delete globalConstraintsRegisterPre[_globalConstraint];\\n                retVal = true;\\n            }\\n        }\\n        if ((when == GlobalConstraintInterface.CallPhase.Post)||\\n            (when == GlobalConstraintInterface.CallPhase.PreAndPost)) {\\n            globalConstraintRegister = globalConstraintsRegisterPost[_globalConstraint];\\n            if (globalConstraintRegister.isRegistered) {\\n                if (globalConstraintRegister.index < globalConstraintsPost.length-1) {\\n                    globalConstraint = globalConstraintsPost[globalConstraintsPost.length-1];\\n                    globalConstraintsPost[globalConstraintRegister.index] = globalConstraint;\\n                    globalConstraintsRegisterPost[globalConstraint.gcAddress].index = globalConstraintRegister.index;\\n                }\\n                globalConstraintsPost.length--;\\n                delete globalConstraintsRegisterPost[_globalConstraint];\\n                retVal = true;\\n            }\\n        }\\n        if (retVal) {\\n            emit RemoveGlobalConstraint(\\n            _globalConstraint,\\n            globalConstraintRegister.index,\\n            when == GlobalConstraintInterface.CallPhase.Pre\\n            );\\n        }\\n        return retVal;\\n    }\\n\\n  /**\\n    * @dev upgrade the Controller\\n    *      The function will trigger an event 'UpgradeController'.\\n    * @param  _newController the address of the new controller.\\n    * @return bool which represents a success\\n    */\\n    function upgradeController(address _newController, Avatar _avatar)\\n    external\\n    onlyUpgradingScheme\\n    isAvatarValid(address(_avatar))\\n    returns(bool)\\n    {\\n        require(newController == address(0));   // so the upgrade could be done once for a contract.\\n        require(_newController != address(0));\\n        newController = _newController;\\n        avatar.transferOwnership(_newController);\\n        require(avatar.owner() == _newController);\\n        if (nativeToken.owner() == address(this)) {\\n            nativeToken.transferOwnership(_newController);\\n            require(nativeToken.owner() == _newController);\\n        }\\n        if (nativeReputation.owner() == address(this)) {\\n            nativeReputation.transferOwnership(_newController);\\n            require(nativeReputation.owner() == _newController);\\n        }\\n        emit UpgradeController(address(this), newController);\\n        return true;\\n    }\\n\\n    /**\\n    * @dev perform a generic call to an arbitrary contract\\n    * @param _contract  the contract's address to call\\n    * @param _data ABI-encoded contract call to call `_contract` address.\\n    * @param _avatar the controller's avatar address\\n    * @param _value value (ETH) to transfer with the transaction\\n    * @return bool -success\\n    *         bytes  - the return value of the called _contract's function.\\n    */\\n    function genericCall(address _contract, bytes calldata _data, Avatar _avatar, uint256 _value)\\n    external\\n    onlyGenericCallScheme\\n    onlySubjectToConstraint(\\\"genericCall\\\")\\n    isAvatarValid(address(_avatar))\\n    returns (bool, bytes memory)\\n    {\\n        return avatar.genericCall(_contract, _data, _value);\\n    }\\n\\n  /**\\n   * @dev send some ether\\n   * @param _amountInWei the amount of ether (in Wei) to send\\n   * @param _to address of the beneficiary\\n   * @return bool which represents a success\\n   */\\n    function sendEther(uint256 _amountInWei, address payable _to, Avatar _avatar)\\n    external\\n    onlyRegisteredScheme\\n    onlySubjectToConstraint(\\\"sendEther\\\")\\n    isAvatarValid(address(_avatar))\\n    returns(bool)\\n    {\\n        return avatar.sendEther(_amountInWei, _to);\\n    }\\n\\n    /**\\n    * @dev send some amount of arbitrary ERC20 Tokens\\n    * @param _externalToken the address of the Token Contract\\n    * @param _to address of the beneficiary\\n    * @param _value the amount of ether (in Wei) to send\\n    * @return bool which represents a success\\n    */\\n    function externalTokenTransfer(IERC20 _externalToken, address _to, uint256 _value, Avatar _avatar)\\n    external\\n    onlyRegisteredScheme\\n    onlySubjectToConstraint(\\\"externalTokenTransfer\\\")\\n    isAvatarValid(address(_avatar))\\n    returns(bool)\\n    {\\n        return avatar.externalTokenTransfer(_externalToken, _to, _value);\\n    }\\n\\n    /**\\n    * @dev transfer token \\\"from\\\" address \\\"to\\\" address\\n    *      One must to approve the amount of tokens which can be spend from the\\n    *      \\\"from\\\" account.This can be done using externalTokenApprove.\\n    * @param _externalToken the address of the Token Contract\\n    * @param _from address of the account to send from\\n    * @param _to address of the beneficiary\\n    * @param _value the amount of ether (in Wei) to send\\n    * @return bool which represents a success\\n    */\\n    function externalTokenTransferFrom(\\n    IERC20 _externalToken,\\n    address _from,\\n    address _to,\\n    uint256 _value,\\n    Avatar _avatar)\\n    external\\n    onlyRegisteredScheme\\n    onlySubjectToConstraint(\\\"externalTokenTransferFrom\\\")\\n    isAvatarValid(address(_avatar))\\n    returns(bool)\\n    {\\n        return avatar.externalTokenTransferFrom(_externalToken, _from, _to, _value);\\n    }\\n\\n    /**\\n    * @dev externalTokenApproval approve the spender address to spend a specified amount of tokens\\n    *      on behalf of msg.sender.\\n    * @param _externalToken the address of the Token Contract\\n    * @param _spender address\\n    * @param _value the amount of ether (in Wei) which the approval is referring to.\\n    * @return bool which represents a success\\n    */\\n    function externalTokenApproval(IERC20 _externalToken, address _spender, uint256 _value, Avatar _avatar)\\n    external\\n    onlyRegisteredScheme\\n    onlySubjectToConstraint(\\\"externalTokenIncreaseApproval\\\")\\n    isAvatarValid(address(_avatar))\\n    returns(bool)\\n    {\\n        return avatar.externalTokenApproval(_externalToken, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev metaData emits an event with a string, should contain the hash of some meta data.\\n    * @param _metaData a string representing a hash of the meta data\\n    * @param _avatar Avatar\\n    * @return bool which represents a success\\n    */\\n    function metaData(string calldata _metaData, Avatar _avatar)\\n        external\\n        onlyMetaDataScheme\\n        isAvatarValid(address(_avatar))\\n        returns(bool)\\n        {\\n        return avatar.metaData(_metaData);\\n    }\\n\\n    /**\\n     * @dev getNativeReputation\\n     * @param _avatar the organization avatar.\\n     * @return organization native reputation\\n     */\\n    function getNativeReputation(address _avatar) external isAvatarValid(_avatar) view returns(address) {\\n        return address(nativeReputation);\\n    }\\n\\n    function isSchemeRegistered(address _scheme, address _avatar) external isAvatarValid(_avatar) view returns(bool) {\\n        return _isSchemeRegistered(_scheme);\\n    }\\n\\n    function getSchemeParameters(address _scheme, address _avatar)\\n    external\\n    isAvatarValid(_avatar)\\n    view\\n    returns(bytes32)\\n    {\\n        return schemes[_scheme].paramsHash;\\n    }\\n\\n    function getSchemePermissions(address _scheme, address _avatar)\\n    external\\n    isAvatarValid(_avatar)\\n    view\\n    returns(bytes4)\\n    {\\n        return schemes[_scheme].permissions;\\n    }\\n\\n    function getGlobalConstraintParameters(address _globalConstraint, address) external view returns(bytes32) {\\n\\n        GlobalConstraintRegister memory register = globalConstraintsRegisterPre[_globalConstraint];\\n\\n        if (register.isRegistered) {\\n            return globalConstraintsPre[register.index].params;\\n        }\\n\\n        register = globalConstraintsRegisterPost[_globalConstraint];\\n\\n        if (register.isRegistered) {\\n            return globalConstraintsPost[register.index].params;\\n        }\\n    }\\n\\n   /**\\n    * @dev globalConstraintsCount return the global constraint pre and post count\\n    * @return uint256 globalConstraintsPre count.\\n    * @return uint256 globalConstraintsPost count.\\n    */\\n    function globalConstraintsCount(address _avatar)\\n        external\\n        isAvatarValid(_avatar)\\n        view\\n        returns(uint, uint)\\n        {\\n        return (globalConstraintsPre.length, globalConstraintsPost.length);\\n    }\\n\\n    function isGlobalConstraintRegistered(address _globalConstraint, address _avatar)\\n        external\\n        isAvatarValid(_avatar)\\n        view\\n        returns(bool)\\n        {\\n        return (globalConstraintsRegisterPre[_globalConstraint].isRegistered ||\\n                globalConstraintsRegisterPost[_globalConstraint].isRegistered);\\n    }\\n\\n    function _isSchemeRegistered(address _scheme) private view returns(bool) {\\n        return (schemes[_scheme].permissions&bytes4(0x00000001) != bytes4(0));\\n    }\\n}\\n\",\"keccak256\":\"0x88fe5ca7618e1ed502a9665e53bfab5260282a9a7b561361ee8067af59a58f5a\"},\"@daostack/arc/contracts/controller/DAOToken.sol\":{\"content\":\"pragma solidity 0.5.13;\\n\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/ownership/Ownable.sol\\\";\\n\\n\\n/**\\n * @title DAOToken, base on zeppelin contract.\\n * @dev ERC20 compatible token. It is a mintable, burnable token.\\n */\\n\\ncontract DAOToken is ERC20, ERC20Burnable, Ownable {\\n\\n    string public name;\\n    string public symbol;\\n    // solhint-disable-next-line const-name-snakecase\\n    uint8 public constant decimals = 18;\\n    uint256 public cap;\\n\\n    /**\\n    * @dev Constructor\\n    * @param _name - token name\\n    * @param _symbol - token symbol\\n    * @param _cap - token cap - 0 value means no cap\\n    */\\n    constructor(string memory _name, string memory _symbol, uint256 _cap)\\n    public {\\n        name = _name;\\n        symbol = _symbol;\\n        cap = _cap;\\n    }\\n\\n    /**\\n     * @dev Function to mint tokens\\n     * @param _to The address that will receive the minted tokens.\\n     * @param _amount The amount of tokens to mint.\\n     */\\n    function mint(address _to, uint256 _amount) public onlyOwner returns (bool) {\\n        if (cap > 0)\\n            require(totalSupply().add(_amount) <= cap);\\n        _mint(_to, _amount);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x567235b3ec3884704725a775559a2c60b46c56d144072929035dbadeeb65e884\"},\"@daostack/arc/contracts/globalConstraints/GlobalConstraintInterface.sol\":{\"content\":\"pragma solidity 0.5.13;\\n\\n\\ncontract GlobalConstraintInterface {\\n\\n    enum CallPhase { Pre, Post, PreAndPost }\\n\\n    function pre( address _scheme, bytes32 _params, bytes32 _method ) public returns(bool);\\n    function post( address _scheme, bytes32 _params, bytes32 _method ) public returns(bool);\\n    /**\\n     * @dev when return if this globalConstraints is pre, post or both.\\n     * @return CallPhase enum indication  Pre, Post or PreAndPost.\\n     */\\n    function when() public returns(CallPhase);\\n}\\n\",\"keccak256\":\"0x83fb7666df1270aa8d857a631172b555dcf4f24fabba9a2a241d2b1ca2e574ef\"},\"@daostack/arc/contracts/libs/SafeERC20.sol\":{\"content\":\"/*\\n\\nSafeERC20 by daostack.\\nThe code is based on a fix by SECBIT Team.\\n\\nUSE WITH CAUTION & NO WARRANTY\\n\\nREFERENCE & RELATED READING\\n- https://github.com/ethereum/solidity/issues/4116\\n- https://medium.com/@chris_77367/explaining-unexpected-reverts-starting-with-solidity-0-4-22-3ada6e82308c\\n- https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n- https://gist.github.com/BrendanChou/88a2eeb80947ff00bcf58ffdafeaeb61\\n\\n*/\\npragma solidity 0.5.13;\\n\\nimport \\\"openzeppelin-solidity/contracts/utils/Address.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    bytes4 constant private TRANSFER_SELECTOR = bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n    bytes4 constant private TRANSFERFROM_SELECTOR = bytes4(keccak256(bytes(\\\"transferFrom(address,address,uint256)\\\")));\\n    bytes4 constant private APPROVE_SELECTOR = bytes4(keccak256(bytes(\\\"approve(address,uint256)\\\")));\\n\\n    function safeTransfer(address _erc20Addr, address _to, uint256 _value) internal {\\n\\n        // Must be a contract addr first!\\n        require(_erc20Addr.isContract());\\n\\n        (bool success, bytes memory returnValue) =\\n        // solhint-disable-next-line avoid-low-level-calls\\n        _erc20Addr.call(abi.encodeWithSelector(TRANSFER_SELECTOR, _to, _value));\\n        // call return false when something wrong\\n        require(success);\\n        //check return value\\n        require(returnValue.length == 0 || (returnValue.length == 32 && (returnValue[31] != 0)));\\n    }\\n\\n    function safeTransferFrom(address _erc20Addr, address _from, address _to, uint256 _value) internal {\\n\\n        // Must be a contract addr first!\\n        require(_erc20Addr.isContract());\\n\\n        (bool success, bytes memory returnValue) =\\n        // solhint-disable-next-line avoid-low-level-calls\\n        _erc20Addr.call(abi.encodeWithSelector(TRANSFERFROM_SELECTOR, _from, _to, _value));\\n        // call return false when something wrong\\n        require(success);\\n        //check return value\\n        require(returnValue.length == 0 || (returnValue.length == 32 && (returnValue[31] != 0)));\\n    }\\n\\n    function safeApprove(address _erc20Addr, address _spender, uint256 _value) internal {\\n\\n        // Must be a contract addr first!\\n        require(_erc20Addr.isContract());\\n\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero.\\n        require((_value == 0) || (IERC20(_erc20Addr).allowance(address(this), _spender) == 0));\\n\\n        (bool success, bytes memory returnValue) =\\n        // solhint-disable-next-line avoid-low-level-calls\\n        _erc20Addr.call(abi.encodeWithSelector(APPROVE_SELECTOR, _spender, _value));\\n        // call return false when something wrong\\n        require(success);\\n        //check return value\\n        require(returnValue.length == 0 || (returnValue.length == 32 && (returnValue[31] != 0)));\\n    }\\n}\\n\",\"keccak256\":\"0x1e91e541a9e835c05372a53eb7879e05bc47f6355602d6d3bf4bbdd8f660fc95\"},\"@daostack/infra/contracts/Reputation.sol\":{\"content\":\"pragma solidity 0.5.13;\\n\\nimport \\\"openzeppelin-solidity/contracts/ownership/Ownable.sol\\\";\\n\\n\\n/**\\n * @title Reputation system\\n * @dev A DAO has Reputation System which allows peers to rate other peers in order to build trust .\\n * A reputation is use to assign influence measure to a DAO'S peers.\\n * Reputation is similar to regular tokens but with one crucial difference: It is non-transferable.\\n * The Reputation contract maintain a map of address to reputation value.\\n * It provides an onlyOwner functions to mint and burn reputation _to (or _from) a specific address.\\n */\\ncontract Reputation is Ownable {\\n\\n    uint8 public decimals = 18;             //Number of decimals of the smallest unit\\n    // Event indicating minting of reputation to an address.\\n    event Mint(address indexed _to, uint256 _amount);\\n    // Event indicating burning of reputation for an address.\\n    event Burn(address indexed _from, uint256 _amount);\\n\\n      /// @dev `Checkpoint` is the structure that attaches a block number to a\\n      ///  given value, the block number attached is the one that last changed the\\n      ///  value\\n    struct Checkpoint {\\n\\n    // `fromBlock` is the block number that the value was generated from\\n        uint128 fromBlock;\\n\\n          // `value` is the amount of reputation at a specific block number\\n        uint128 value;\\n    }\\n\\n      // `balances` is the map that tracks the balance of each address, in this\\n      //  contract when the balance changes the block number that the change\\n      //  occurred is also included in the map\\n    mapping (address => Checkpoint[]) private balances;\\n\\n      // Tracks the history of the `totalSupply` of the reputation\\n    Checkpoint[] private totalSupplyHistory;\\n\\n      /// @notice Generates `_amount` reputation that are assigned to `_owner`\\n      /// @param _user The address that will be assigned the new reputation\\n      /// @param _amount The quantity of reputation generated\\n      /// @return True if the reputation are generated correctly\\n    function mint(address _user, uint256 _amount) public onlyOwner returns (bool) {\\n        uint256 curTotalSupply = totalSupply();\\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\\n        uint256 previousBalanceTo = balanceOf(_user);\\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\\n        updateValueAtNow(balances[_user], previousBalanceTo + _amount);\\n        emit Mint(_user, _amount);\\n        return true;\\n    }\\n\\n      /// @notice Burns `_amount` reputation from `_owner`\\n      /// @param _user The address that will lose the reputation\\n      /// @param _amount The quantity of reputation to burn\\n      /// @return True if the reputation are burned correctly\\n    function burn(address _user, uint256 _amount) public onlyOwner returns (bool) {\\n        uint256 curTotalSupply = totalSupply();\\n        uint256 amountBurned = _amount;\\n        uint256 previousBalanceFrom = balanceOf(_user);\\n        if (previousBalanceFrom < amountBurned) {\\n            amountBurned = previousBalanceFrom;\\n        }\\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - amountBurned);\\n        updateValueAtNow(balances[_user], previousBalanceFrom - amountBurned);\\n        emit Burn(_user, amountBurned);\\n        return true;\\n    }\\n\\n    /// @dev This function makes it easy to get the total number of reputation\\n    /// @return The total number of reputation\\n    function totalSupply() public view returns (uint256) {\\n        return totalSupplyAt(block.number);\\n    }\\n\\n    ////////////////\\n    // Query balance and totalSupply in History\\n    ////////////////\\n    /**\\n    * @dev return the reputation amount of a given owner\\n    * @param _owner an address of the owner which we want to get his reputation\\n    */\\n    function balanceOf(address _owner) public view returns (uint256 balance) {\\n        return balanceOfAt(_owner, block.number);\\n    }\\n\\n    /// @notice Total amount of reputation at a specific `_blockNumber`.\\n    /// @param _blockNumber The block number when the totalSupply is queried\\n    /// @return The total amount of reputation at `_blockNumber`\\n    function totalSupplyAt(uint256 _blockNumber) public view returns(uint256) {\\n        if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\\n            return 0;\\n          // This will return the expected totalSupply during normal situations\\n        } else {\\n            return getValueAt(totalSupplyHistory, _blockNumber);\\n        }\\n    }\\n\\n  /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\\n  /// @param _owner The address from which the balance will be retrieved\\n  /// @param _blockNumber The block number when the balance is queried\\n  /// @return The balance at `_blockNumber`\\n    function balanceOfAt(address _owner, uint256 _blockNumber)\\n    public view returns (uint256)\\n    {\\n        if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)) {\\n            return 0;\\n        // This will return the expected balance during normal situations\\n        } else {\\n            return getValueAt(balances[_owner], _blockNumber);\\n        }\\n    }\\n  ////////////////\\n  // Internal helper functions to query and set a value in a snapshot array\\n  ////////////////\\n\\n      /// @dev `getValueAt` retrieves the number of reputation at a given block number\\n      /// @param checkpoints The history of values being queried\\n      /// @param _block The block number to retrieve the value at\\n      /// @return The number of reputation being queried\\n    function getValueAt(Checkpoint[] storage checkpoints, uint256 _block) internal view returns (uint256) {\\n        if (checkpoints.length == 0) {\\n            return 0;\\n        }\\n\\n          // Shortcut for the actual value\\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock) {\\n            return checkpoints[checkpoints.length-1].value;\\n        }\\n        if (_block < checkpoints[0].fromBlock) {\\n            return 0;\\n        }\\n\\n          // Binary search of the value in the array\\n        uint256 min = 0;\\n        uint256 max = checkpoints.length-1;\\n        while (max > min) {\\n            uint256 mid = (max + min + 1) / 2;\\n            if (checkpoints[mid].fromBlock <= _block) {\\n                min = mid;\\n            } else {\\n                max = mid-1;\\n            }\\n        }\\n        return checkpoints[min].value;\\n    }\\n\\n      /// @dev `updateValueAtNow` used to update the `balances` map and the\\n      ///  `totalSupplyHistory`\\n      /// @param checkpoints The history of data being updated\\n      /// @param _value The new number of reputation\\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint256 _value) internal {\\n        require(uint128(_value) == _value); //check value is in the 128 bits bounderies\\n        if ((checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < block.number)) {\\n            Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];\\n            newCheckPoint.fromBlock = uint128(block.number);\\n            newCheckPoint.value = uint128(_value);\\n        } else {\\n            Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\\n            oldCheckPoint.value = uint128(_value);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8218b8a68b491a6e5ee3a445f5a7d21579c8a2e88f41bc10124f3b5c4c1cfff1\"},\"contracts/UniswapProxy.sol\":{\"content\":\"pragma solidity >=0.5.13;\\n\\nimport \\\"@daostack/arc/contracts/controller/Avatar.sol\\\";\\nimport \\\"@daostack/arc/contracts/controller/Controller.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\\\";\\nimport './uniswap/IUniswapV2Router02.sol';\\n\\n/**\\n * @title A UniswapV2 proxy made with \\u2764\\ufe0f for the necDAO folks\\n * @dev   We'll tell when we know\\n */\\ncontract UniswapProxy {\\n  bool               public initialized;\\n  Avatar             public avatar;\\n  IUniswapV2Router02 public router;\\n\\n  event Swap (address from, address to, uint256 amount, uint256 expected, uint256 returned);\\n\\n  modifier initializer() {\\n    require(!initialized, \\\"UniswapProxy: proxy already initialized\\\");\\n    _;\\n  }\\n\\n  modifier protected () {\\n    require(initialized,                   \\\"UniswapProxy: proxy not initialized\\\");\\n    require(msg.sender == address(avatar), \\\"UniswapProxy: protected function\\\");\\n    _;\\n  }\\n\\n  /**\\n    * @dev           Initialize proxy.\\n    * @param _avatar The address of the Avatar controlling this proxy.\\n    * @param _router The address of the Uniswap router through which this proxy will interact with UniswapV2.\\n    */\\n  function initialize(Avatar _avatar, IUniswapV2Router02 _router) external initializer {\\n      require(_avatar != Avatar(0), \\\"UniswapProxy: avatar cannot be null\\\");\\n\\n      initialized = true;\\n      avatar = _avatar;\\n      router = _router;\\n  }\\n\\n  /**\\n    * @dev             Swap tokens.\\n    * @param _from     The address of the token to swap from [address(0) for ETH].\\n    * @param _to       The address of the token to swap to [address(0) for ETH].\\n    * @param _amount   The amount of `_from` token to swap.\\n    * @param _expected The minimum amount of `_to` token to expect in return for the swap [reverts otherwise].\\n    */\\n  function swap(address _from, address _to, uint256 _amount, uint256 _expected) public protected {\\n    require(_amount > 0,  \\\"UniswapProxy: invalid swap amount\\\");\\n    require(_from != _to, \\\"UniswapProxy: invalid swap pair\\\");\\n\\n    _swap(_from, _to, _amount, _expected);\\n  }\\n\\n  /* internal state-modifying functions */\\n\\n  function _swap(address _from, address _to, uint256 _amount, uint256 _expected) internal {\\n    Controller       controller = Controller(avatar.owner());\\n    address[] memory path = new address[](2);\\n    bytes     memory returned;\\n    bool             success;\\n\\n    if (_from != address(0) && _to != address(0)) {\\n      path[0] = _from;\\n      path[1] = _to;\\n      // swap\\n      (success, returned) = controller.genericCall(_from, abi.encodeWithSelector(ERC20(_from).approve.selector, address(router), _amount), avatar, 0);\\n      require(success, 'UniswapProxy: ERC20 approval failed before swap');\\n      (success, returned) = controller.genericCall(address(router), abi.encodeWithSelector(router.swapExactTokensForTokens.selector, _amount, _expected, path, avatar, block.timestamp), avatar, 0);\\n      require(success, 'UniswapProxy: swap failed');\\n    } else if (_from == address(0)) {\\n      path[0] = router.WETH();\\n      path[1] = _to;\\n      (success, returned) = controller.genericCall(address(router), abi.encodeWithSelector(router.swapExactETHForTokens.selector, _expected, path, avatar, block.timestamp), avatar, _amount);\\n      require(success, 'UniswapProxy: swap failed');\\n    } else if (_to == address(0)) {\\n      path[0] = _from;\\n      path[1] = router.WETH();\\n      (success, returned) = controller.genericCall(address(router), abi.encodeWithSelector(router.swapExactTokensForETH.selector, _amount, _expected, path, avatar, block.timestamp), avatar, 0);\\n      require(success, 'UniswapProxy: swap failed');\\n    }\\n\\n    emit Swap(_from, _to, _amount, _expected, _parseSwapReturnAmount(returned));\\n  }\\n\\n  function _parseSwapReturnAmount(bytes memory data) internal pure returns (uint256 amount) {\\n    assembly {\\n      amount := mload(add(data, 128))\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x452f3ea1d4de88f0d9b1bde3e106fc3363d3b5c1816f2b1330011785226aec1d\"},\"contracts/uniswap/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\n\\ninterface IUniswapV2Router02 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    // V1\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n    \\n    // V2\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6b154f692428d3e6f4d035c7f1b901550a99d4d32cec07c7fb5cf72fafe052c7\"},\"openzeppelin-solidity/contracts/GSN/Context.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90a3995645af7562d84b9d69363ffa5ae7217714ab61e951bf7bc450f40e4061\"},\"openzeppelin-solidity/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x640b6dee7a4b830bdfd52b5031a07fc2b12209f5b2e29e5d364a7d37f69d8076\"},\"openzeppelin-solidity/contracts/ownership/Ownable.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        _owner = _msgSender();\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0xecd8ab29d9a5771c3964d0cd1788c4a5098a0081b20fb275da850a22b1c59806\"},\"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20Mintable}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for `sender`'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n     /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\\n     * from the caller's allowance.\\n     *\\n     * See {_burn} and {_approve}.\\n     */\\n    function _burnFrom(address account, uint256 amount) internal {\\n        _burn(account, amount);\\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \\\"ERC20: burn amount exceeds allowance\\\"));\\n    }\\n}\\n\",\"keccak256\":\"0x65a4078c03875c25413a068ce9cfdd7e68a90f8786612d1189c89341e6e3b802\"},\"openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\ncontract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev See {ERC20-_burnFrom}.\\n     */\\n    function burnFrom(address account, uint256 amount) public {\\n        _burnFrom(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x9b94356691f3cbf90a5d83ae3fdf6a5a662bb004d2bd8b034160d60221807e64\"},\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xe5bb0f57cff3e299f360052ba50f1ea0fff046df2be070b6943e0e3c3fdad8a9\"},\"openzeppelin-solidity/contracts/utils/Address.sol\":{\"content\":\"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * This test is non-exhaustive, and there may be false-negatives: during the\\n     * execution of a contract's constructor, its address will be reported as\\n     * not containing a contract.\\n     *\\n     * IMPORTANT: It is unsafe to assume that an address for which this\\n     * function returns false is an externally-owned account (EOA) and not a\\n     * contract.\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != 0x0 && codehash != accountHash);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x70df50e240407aa50915ad14f61b1a901fa335b37de20955b99ed647be756af0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061128c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063158ef93e1461005c578063485cc955146100785780635aef7de6146100a8578063f887ea40146100cc578063fe029156146100d4575b600080fd5b610064610110565b604080519115158252519081900360200190f35b6100a66004803603604081101561008e57600080fd5b506001600160a01b0381358116916020013516610119565b005b6100b06101e1565b604080516001600160a01b039092168252519081900360200190f35b6100b06101f5565b6100a6600480360360808110156100ea57600080fd5b506001600160a01b03813581169160208101359091169060408101359060600135610204565b60005460ff1681565b60005460ff161561015b5760405162461bcd60e51b81526004018080602001828103825260278152602001806112316027913960400191505060405180910390fd5b6001600160a01b0382166101a05760405162461bcd60e51b81526004018080602001828103825260238152602001806111be6023913960400191505060405180910390fd5b60008054600160ff199091168117610100600160a81b0319166101006001600160a01b03958616021790915580546001600160a01b03191691909216179055565b60005461010090046001600160a01b031681565b6001546001600160a01b031681565b60005460ff166102455760405162461bcd60e51b815260040180806020018281038252602381526020018061119b6023913960400191505060405180910390fd5b60005461010090046001600160a01b031633146102a9576040805162461bcd60e51b815260206004820181905260248201527f556e697377617050726f78793a2070726f7465637465642066756e6374696f6e604482015290519081900360640190fd5b600082116102e85760405162461bcd60e51b81526004018080602001828103825260218152602001806111e16021913960400191505060405180910390fd5b826001600160a01b0316846001600160a01b0316141561034f576040805162461bcd60e51b815260206004820152601f60248201527f556e697377617050726f78793a20696e76616c69642073776170207061697200604482015290519081900360640190fd5b61035b84848484610361565b50505050565b60008060019054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156103b057600080fd5b505afa1580156103c4573d6000803e3d6000fd5b505050506040513d60208110156103da57600080fd5b5051604080516002808252606080830184529394509091602083019080388339019050509050606060006001600160a01b0388161580159061042457506001600160a01b03871615155b15610a8857878360008151811061043757fe5b60200260200101906001600160a01b031690816001600160a01b031681525050868360018151811061046557fe5b60200260200101906001600160a01b031690816001600160a01b031681525050836001600160a01b031663d1b7089a898a6001600160a01b031663095ea7b3905060e01b600160009054906101000a90046001600160a01b03168a60405160240180836001600160a01b03166001600160a01b0316815260200182815260200192505050604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b038381831617835250505050600060019054906101000a90046001600160a01b031660006040518563ffffffff1660e01b815260040180856001600160a01b03166001600160a01b0316815260200180602001846001600160a01b03166001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019080838360005b838110156105b657818101518382015260200161059e565b50505050905090810190601f1680156105e35780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561060557600080fd5b505af1158015610619573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604090815281101561064257600080fd5b815160208301805160405192949293830192919084600160201b82111561066857600080fd5b90830190602082018581111561067d57600080fd5b8251600160201b81118282018810171561069657600080fd5b82525081516020918201929091019080838360005b838110156106c35781810151838201526020016106ab565b50505050905090810190601f1680156106f05780820380516001836020036101000a031916815260200191505b5060405250505080935081925050508061073b5760405162461bcd60e51b815260040180806020018281038252602f815260200180611202602f913960400191505060405180910390fd5b836001600160a01b031663d1b7089a600160009054906101000a90046001600160a01b0316600160009054906101000a90046001600160a01b03166001600160a01b03166338ed1739905060e01b898988600060019054906101000a90046001600160a01b0316426040516024018086815260200185815260200180602001846001600160a01b03166001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b838110156108105781810151838201526020016107f8565b505050509050019650505050505050604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b038381831617835250505050600060019054906101000a90046001600160a01b031660006040518563ffffffff1660e01b815260040180856001600160a01b03166001600160a01b0316815260200180602001846001600160a01b03166001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019080838360005b838110156108ec5781810151838201526020016108d4565b50505050905090810190601f1680156109195780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561093b57600080fd5b505af115801561094f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604090815281101561097857600080fd5b815160208301805160405192949293830192919084600160201b82111561099e57600080fd5b9083019060208201858111156109b357600080fd5b8251600160201b8111828201881017156109cc57600080fd5b82525081516020918201929091019080838360005b838110156109f95781810151838201526020016109e1565b50505050905090810190601f168015610a265780820380516001836020036101000a031916815260200191505b50604052505050809350819250505080610a83576040805162461bcd60e51b8152602060048201526019602482015278155b9a5cddd85c141c9bde1e4e881cddd85c0819985a5b1959603a1b604482015290519081900360640190fd5b611125565b6001600160a01b038816610d1257600160009054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b158015610ae457600080fd5b505afa158015610af8573d6000803e3d6000fd5b505050506040513d6020811015610b0e57600080fd5b505183518490600090610b1d57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508683600181518110610b4b57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050836001600160a01b031663d1b7089a600160009054906101000a90046001600160a01b0316600160009054906101000a90046001600160a01b03166001600160a01b0316637ff36ab5905060e01b8887600060019054906101000a90046001600160a01b0316426040516024018085815260200180602001846001600160a01b03166001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b83811015610c39578181015183820152602001610c21565b5050505090500195505050505050604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b038381831617835250505050600060019054906101000a90046001600160a01b03168a6040518563ffffffff1660e01b815260040180856001600160a01b03166001600160a01b0316815260200180602001846001600160a01b03166001600160a01b0316815260200183815260200182810382528581815181526020019150805190602001908083836000838110156108ec5781810151838201526020016108d4565b6001600160a01b038716611125578783600081518110610d2e57fe5b6001600160a01b03928316602091820292909201810191909152600154604080516315ab88c960e31b81529051919093169263ad5c4648926004808301939192829003018186803b158015610d8257600080fd5b505afa158015610d96573d6000803e3d6000fd5b505050506040513d6020811015610dac57600080fd5b5051835184906001908110610dbd57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050836001600160a01b031663d1b7089a600160009054906101000a90046001600160a01b0316600160009054906101000a90046001600160a01b03166001600160a01b03166318cbafe5905060e01b898988600060019054906101000a90046001600160a01b0316426040516024018086815260200185815260200180602001846001600160a01b03166001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b83811015610eb2578181015183820152602001610e9a565b505050509050019650505050505050604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b038381831617835250505050600060019054906101000a90046001600160a01b031660006040518563ffffffff1660e01b815260040180856001600160a01b03166001600160a01b0316815260200180602001846001600160a01b03166001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015610f8e578181015183820152602001610f76565b50505050905090810190601f168015610fbb5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015610fdd57600080fd5b505af1158015610ff1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604090815281101561101a57600080fd5b815160208301805160405192949293830192919084600160201b82111561104057600080fd5b90830190602082018581111561105557600080fd5b8251600160201b81118282018810171561106e57600080fd5b82525081516020918201929091019080838360005b8381101561109b578181015183820152602001611083565b50505050905090810190601f1680156110c85780820380516001836020036101000a031916815260200191505b50604052505050809350819250505080611125576040805162461bcd60e51b8152602060048201526019602482015278155b9a5cddd85c141c9bde1e4e881cddd85c0819985a5b1959603a1b604482015290519081900360640190fd5b7f9734819749a91fc3be03ea83205f924ee08479bd3f0da48efc91d94d050cac1e8888888861115387611193565b604080516001600160a01b039687168152949095166020850152838501929092526060830152608082015290519081900360a00190a15050505050505050565b608001519056fe556e697377617050726f78793a2070726f7879206e6f7420696e697469616c697a6564556e697377617050726f78793a206176617461722063616e6e6f74206265206e756c6c556e697377617050726f78793a20696e76616c6964207377617020616d6f756e74556e697377617050726f78793a20455243323020617070726f76616c206661696c6564206265666f72652073776170556e697377617050726f78793a2070726f787920616c726561647920696e697469616c697a6564a265627a7a72315820f0512ccb2f813916ce343c7a87d81429c0fe16de093e6dd399df2ae520317def64736f6c634300050d0032",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c8063158ef93e1461005c578063485cc955146100785780635aef7de6146100a8578063f887ea40146100cc578063fe029156146100d4575b600080fd5b610064610110565b604080519115158252519081900360200190f35b6100a66004803603604081101561008e57600080fd5b506001600160a01b0381358116916020013516610119565b005b6100b06101e1565b604080516001600160a01b039092168252519081900360200190f35b6100b06101f5565b6100a6600480360360808110156100ea57600080fd5b506001600160a01b03813581169160208101359091169060408101359060600135610204565b60005460ff1681565b60005460ff161561015b5760405162461bcd60e51b81526004018080602001828103825260278152602001806112316027913960400191505060405180910390fd5b6001600160a01b0382166101a05760405162461bcd60e51b81526004018080602001828103825260238152602001806111be6023913960400191505060405180910390fd5b60008054600160ff199091168117610100600160a81b0319166101006001600160a01b03958616021790915580546001600160a01b03191691909216179055565b60005461010090046001600160a01b031681565b6001546001600160a01b031681565b60005460ff166102455760405162461bcd60e51b815260040180806020018281038252602381526020018061119b6023913960400191505060405180910390fd5b60005461010090046001600160a01b031633146102a9576040805162461bcd60e51b815260206004820181905260248201527f556e697377617050726f78793a2070726f7465637465642066756e6374696f6e604482015290519081900360640190fd5b600082116102e85760405162461bcd60e51b81526004018080602001828103825260218152602001806111e16021913960400191505060405180910390fd5b826001600160a01b0316846001600160a01b0316141561034f576040805162461bcd60e51b815260206004820152601f60248201527f556e697377617050726f78793a20696e76616c69642073776170207061697200604482015290519081900360640190fd5b61035b84848484610361565b50505050565b60008060019054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156103b057600080fd5b505afa1580156103c4573d6000803e3d6000fd5b505050506040513d60208110156103da57600080fd5b5051604080516002808252606080830184529394509091602083019080388339019050509050606060006001600160a01b0388161580159061042457506001600160a01b03871615155b15610a8857878360008151811061043757fe5b60200260200101906001600160a01b031690816001600160a01b031681525050868360018151811061046557fe5b60200260200101906001600160a01b031690816001600160a01b031681525050836001600160a01b031663d1b7089a898a6001600160a01b031663095ea7b3905060e01b600160009054906101000a90046001600160a01b03168a60405160240180836001600160a01b03166001600160a01b0316815260200182815260200192505050604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b038381831617835250505050600060019054906101000a90046001600160a01b031660006040518563ffffffff1660e01b815260040180856001600160a01b03166001600160a01b0316815260200180602001846001600160a01b03166001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019080838360005b838110156105b657818101518382015260200161059e565b50505050905090810190601f1680156105e35780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561060557600080fd5b505af1158015610619573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604090815281101561064257600080fd5b815160208301805160405192949293830192919084600160201b82111561066857600080fd5b90830190602082018581111561067d57600080fd5b8251600160201b81118282018810171561069657600080fd5b82525081516020918201929091019080838360005b838110156106c35781810151838201526020016106ab565b50505050905090810190601f1680156106f05780820380516001836020036101000a031916815260200191505b5060405250505080935081925050508061073b5760405162461bcd60e51b815260040180806020018281038252602f815260200180611202602f913960400191505060405180910390fd5b836001600160a01b031663d1b7089a600160009054906101000a90046001600160a01b0316600160009054906101000a90046001600160a01b03166001600160a01b03166338ed1739905060e01b898988600060019054906101000a90046001600160a01b0316426040516024018086815260200185815260200180602001846001600160a01b03166001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b838110156108105781810151838201526020016107f8565b505050509050019650505050505050604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b038381831617835250505050600060019054906101000a90046001600160a01b031660006040518563ffffffff1660e01b815260040180856001600160a01b03166001600160a01b0316815260200180602001846001600160a01b03166001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019080838360005b838110156108ec5781810151838201526020016108d4565b50505050905090810190601f1680156109195780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561093b57600080fd5b505af115801561094f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604090815281101561097857600080fd5b815160208301805160405192949293830192919084600160201b82111561099e57600080fd5b9083019060208201858111156109b357600080fd5b8251600160201b8111828201881017156109cc57600080fd5b82525081516020918201929091019080838360005b838110156109f95781810151838201526020016109e1565b50505050905090810190601f168015610a265780820380516001836020036101000a031916815260200191505b50604052505050809350819250505080610a83576040805162461bcd60e51b8152602060048201526019602482015278155b9a5cddd85c141c9bde1e4e881cddd85c0819985a5b1959603a1b604482015290519081900360640190fd5b611125565b6001600160a01b038816610d1257600160009054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b158015610ae457600080fd5b505afa158015610af8573d6000803e3d6000fd5b505050506040513d6020811015610b0e57600080fd5b505183518490600090610b1d57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508683600181518110610b4b57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050836001600160a01b031663d1b7089a600160009054906101000a90046001600160a01b0316600160009054906101000a90046001600160a01b03166001600160a01b0316637ff36ab5905060e01b8887600060019054906101000a90046001600160a01b0316426040516024018085815260200180602001846001600160a01b03166001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b83811015610c39578181015183820152602001610c21565b5050505090500195505050505050604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b038381831617835250505050600060019054906101000a90046001600160a01b03168a6040518563ffffffff1660e01b815260040180856001600160a01b03166001600160a01b0316815260200180602001846001600160a01b03166001600160a01b0316815260200183815260200182810382528581815181526020019150805190602001908083836000838110156108ec5781810151838201526020016108d4565b6001600160a01b038716611125578783600081518110610d2e57fe5b6001600160a01b03928316602091820292909201810191909152600154604080516315ab88c960e31b81529051919093169263ad5c4648926004808301939192829003018186803b158015610d8257600080fd5b505afa158015610d96573d6000803e3d6000fd5b505050506040513d6020811015610dac57600080fd5b5051835184906001908110610dbd57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050836001600160a01b031663d1b7089a600160009054906101000a90046001600160a01b0316600160009054906101000a90046001600160a01b03166001600160a01b03166318cbafe5905060e01b898988600060019054906101000a90046001600160a01b0316426040516024018086815260200185815260200180602001846001600160a01b03166001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b83811015610eb2578181015183820152602001610e9a565b505050509050019650505050505050604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b038381831617835250505050600060019054906101000a90046001600160a01b031660006040518563ffffffff1660e01b815260040180856001600160a01b03166001600160a01b0316815260200180602001846001600160a01b03166001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015610f8e578181015183820152602001610f76565b50505050905090810190601f168015610fbb5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015610fdd57600080fd5b505af1158015610ff1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604090815281101561101a57600080fd5b815160208301805160405192949293830192919084600160201b82111561104057600080fd5b90830190602082018581111561105557600080fd5b8251600160201b81118282018810171561106e57600080fd5b82525081516020918201929091019080838360005b8381101561109b578181015183820152602001611083565b50505050905090810190601f1680156110c85780820380516001836020036101000a031916815260200191505b50604052505050809350819250505080611125576040805162461bcd60e51b8152602060048201526019602482015278155b9a5cddd85c141c9bde1e4e881cddd85c0819985a5b1959603a1b604482015290519081900360640190fd5b7f9734819749a91fc3be03ea83205f924ee08479bd3f0da48efc91d94d050cac1e8888888861115387611193565b604080516001600160a01b039687168152949095166020850152838501929092526060830152608082015290519081900360a00190a15050505050505050565b608001519056fe556e697377617050726f78793a2070726f7879206e6f7420696e697469616c697a6564556e697377617050726f78793a206176617461722063616e6e6f74206265206e756c6c556e697377617050726f78793a20696e76616c6964207377617020616d6f756e74556e697377617050726f78793a20455243323020617070726f76616c206661696c6564206265666f72652073776170556e697377617050726f78793a2070726f787920616c726561647920696e697469616c697a6564a265627a7a72315820f0512ccb2f813916ce343c7a87d81429c0fe16de093e6dd399df2ae520317def64736f6c634300050d0032",
  "devdoc": {
    "details": "We'll tell when we know",
    "methods": {
      "initialize(address,address)": {
        "details": "Initialize proxy.",
        "params": {
          "_avatar": "The address of the Avatar controlling this proxy.",
          "_router": "The address of the Uniswap router through which this proxy will interact with UniswapV2."
        }
      },
      "swap(address,address,uint256,uint256)": {
        "details": "Swap tokens.",
        "params": {
          "_amount": "The amount of `_from` token to swap.",
          "_expected": "The minimum amount of `_to` token to expect in return for the swap [reverts otherwise].",
          "_from": "The address of the token to swap from [address(0) for ETH].",
          "_to": "The address of the token to swap to [address(0) for ETH]."
        }
      }
    },
    "title": "A UniswapV2 proxy made with ❤️ for the necDAO folks"
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8400,
        "contract": "contracts/UniswapProxy.sol:UniswapProxy",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 8402,
        "contract": "contracts/UniswapProxy.sol:UniswapProxy",
        "label": "avatar",
        "offset": 1,
        "slot": "0",
        "type": "t_contract(Avatar)279"
      },
      {
        "astId": 8404,
        "contract": "contracts/UniswapProxy.sol:UniswapProxy",
        "label": "router",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IUniswapV2Router02)9501"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(Avatar)279": {
        "encoding": "inplace",
        "label": "contract Avatar",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Router02)9501": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      }
    }
  },
  "gasEstimates": {
    "creation": {
      "codeDepositCost": "949600",
      "executionCost": "988",
      "totalCost": "950588"
    },
    "external": {
      "avatar()": "470",
      "initialize(address,address)": "infinite",
      "initialized()": "388",
      "router()": "481",
      "swap(address,address,uint256,uint256)": "infinite"
    },
    "internal": {
      "_parseSwapReturnAmount(bytes memory)": "infinite",
      "_swap(address,address,uint256,uint256)": "infinite"
    }
  }
}